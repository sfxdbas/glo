 DO LANGUAGE plpgsql $$
DECLARE
  ld_id legacy_demographics.id%TYPE;ld_msisdn legacy_demographics.msisdn%TYPE;
  ld_sim_serial legacy_demographics.sim_serial%TYPE;
  ld_unique_id legacy_demographics.unique_id%TYPE;
  ld_firstname legacy_demographics.firstname%TYPE;
  ld_lastname legacy_demographics.lastname%TYPE;
  ld_other_name legacy_demographics.other_name%TYPE;
  ld_gender legacy_demographics.gender%TYPE;
  ld_mothers_maiden_name legacy_demographics.mothers_maiden_name%TYPE;
  ld_birthday legacy_demographics.birthday%TYPE;
  ld_state_of_origin legacy_demographics.state_of_origin%TYPE;
  ld_lga_of_origin legacy_demographics.lga_of_origin%TYPE;
  ld_country legacy_demographics.country%TYPE;
  ld_occupation legacy_demographics.occupation%TYPE;
  ld_registration_state legacy_demographics.registration_state%TYPE;
  ld_registration_lga legacy_demographics.registration_lga%TYPE;
  ld_postal_code legacy_demographics.postal_code%TYPE;
  ld_residential_area legacy_demographics.residential_area%TYPE;
  ld_residential_lga legacy_demographics.residential_lga%TYPE;
  ld_residential_state legacy_demographics.residential_state%TYPE;
  ld_residential_address legacy_demographics.residential_address%TYPE;
  ld_passport_issuing_country legacy_demographics.passport_issuing_country%TYPE;
  ld_passport_number legacy_demographics.passport_number%TYPE;
  ld_passport_expiry_date legacy_demographics.passport_expiry_date%TYPE;
  ld_subscriber_type legacy_demographics.subscriber_type%TYPE;
  ld_is_resident legacy_demographics.is_resident%TYPE;
  ld_email_address legacy_demographics.email_address%TYPE;
  ld_mode_of_identification legacy_demographics.mode_of_identification%TYPE;
  ld_alternate_phone_number legacy_demographics.alternate_phone_number%TYPE;
  ld_company_name legacy_demographics.company_name%TYPE;
  ld_company_registration_number legacy_demographics.company_registration_number%TYPE;
  ld_company_address legacy_demographics.company_address%TYPE;ld_company_state legacy_demographics.company_state%TYPE;ld_company_lga legacy_demographics.company_lga%TYPE;
  ld_company_postal_code legacy_demographics.company_postal_code%TYPE;
  ld_tag legacy_demographics.tag%TYPE;
  ld_device_id legacy_demographics.device_id%TYPE;
  ld_mac_address legacy_demographics.mac_address%TYPE;
  ld_registration_date legacy_demographics.registration_date%TYPE;
  ld_sync_date legacy_demographics.sync_date%TYPE;
  ld_confirmation_timestamp legacy_demographics.confirmation_timestamp%TYPE;
  ld_override_reason legacy_demographics.override_reason%TYPE;
  ld_registration_type legacy_demographics.registration_type%TYPE;
  ld_agent_email legacy_demographics.agent_email%TYPE;
  ld_basic_data_created legacy_demographics.basic_data_created%TYPE;

  cur_data_migration CURSOR 
  FOR
    SELECT id,
           msisdn,
           sim_serial,
           unique_id,
           firstname,
           lastname,
           other_name,
           gender,
           mothers_maiden_name,
           birthday,
           state_of_origin,
           lga_of_origin,
           country,
           occupation,
           registration_state,
           registration_lga,
           postal_code,
           residential_area,
           residential_lga,
           residential_state,
           residential_address,
           passport_issuing_country,
           passport_number,
           passport_expiry_date,
           subscriber_type,
           is_resident,
           email_address,
           mode_of_identification,
           alternate_phone_number,
           company_name,
           company_registration_number,
           company_address,
           company_state,
           company_lga,
           company_postal_code,
           tag,
           device_id,
           mac_address,
           registration_date,
           sync_date,
           confirmation_timestamp,
           override_reason,
           registration_type,
           agent_email,
           basic_data_created
    FROM   legacy_demographics;

    BEGIN
  OPEN cur_data_migration;
  LOOP
    FETCH cur_data_migration
    INTO  ld_id,
          ld_msisdn,
          ld_sim_serial,
          ld_unique_id,
          ld_firstname ,
          ld_lastname,
          ld_other_name ,
          ld_gender,
          ld_mothers_maiden_name,
          ld_birthday,
          ld_state_of_origin,
          ld_lga_of_origin,
          ld_country ,
          ld_occupation,
          ld_registration_state ,
          ld_registration_lga,
          ld_postal_code,
          ld_residential_area,
          ld_residential_lga ,
          ld_residential_state,
          ld_residential_address,
          ld_passport_issuing_country,
          ld_passport_number ,
          ld_passport_expiry_date,
          ld_subscriber_type,
          ld_is_resident,
          ld_email_address ,
          ld_mode_of_identification,
          ld_alternate_phone_number ,
          ld_company_name,
          ld_company_registration_number,
          ld_company_address,
          ld_company_state,
          ld_company_lga ,
          ld_company_postal_code,
          ld_tag,
          ld_device_id,
          ld_mac_address,
          ld_registration_date,
          ld_sync_date,
          ld_confirmation_timestamp,
          ld_override_reason,
          ld_registration_type,
          ld_agent_email,
          ld_basic_data_created;
    
    EXIT
  WHEN cur_data_migration%NOTFOUND;
  
    INSERT INTO public.user_id
                (
                            id,
                            active,
                            conflict,
                            unique_id
                )
                VALUES
                (
                            ld_id,
                            'true',
                            'false',
                            ld_id
                )
    ON conflict
                (
                            id
                )
                DO nothing;
    
    INSERT INTO public.basic_data
                (
                            id,
                            biometric_capture_agent,
                            birthday,
                            bd_part_key,
                            firstname,
                            gender,
                            is_processed,
                            last_basic_data_edit_agent,
                            last_basic_data_edit_login_id,
                            match_found,
                            othername,
                            sms_status,
                            surname,
                            sync_status,
                            state_of_registration_fk,
                            user_id_fk
                )
                VALUES
                (
                            ld_id,
                            ld_tag,
                            ld_birthday,
                            ld_sync_date,
                            ld_firstname,
                            ld_gender,
                            'false',
                            ld_tag,
                            ld_tag,
                            'false',
                            ld_other_name,
                            'NOT_SENT',
                            ld_lastname,
                            'NONE',
                            cast(ld_override_reason AS bigint),
                            ld_id
                )
    ON conflict
                (
                            id
                )
                DO nothing;
    
    INSERT INTO public.dynamic_data
                (
                            id,
                            da1,
                            da2,
                            da3,
                            da36,
                            da4,
                            da5,
                            da6,
                            da7,
                            da8,
                            da9,
                            dda1,
                            dda10,
                            dda11,
                            dda12,
                            dda14,
                            dda15,
                            dda16,
                            dda17,
                            dda18,
                            dda19,
                            dda5,
                            dda6,
                            dda7,
                            dda8,
                            dda9,
                            basic_data_fk
                )
                VALUES
                (
                            ld_id,
                            to_char(ld_birthday, 'yyyy-mm-dd'),
                            ld_alternate_phone_number,
                            ld_occupation,
                            ld_residential_address,
                            ld_country,
                            ld_msisdn,
                            'N/A',
                            ld_email_address,
                            'N/A',
                            ld_state_of_origin,
                            ld_lga_of_origin,
                            ld_id,
                            ld_registration_type,
                            ld_mothers_maiden_name,
                            ld_company_registration_number,
                            ld_company_address,
                            ld_company_state,
                            ld_company_lga,
                            ld_company_postal_code,
                            ld_country,
                            ld_residential_state,
                            ld_residential_lga,
                            ld_postal_code,
                            ld_company_name,
                            ld_registration_lga,
                            ld_id
                )
    ON conflict
                (
                            id
                )
                DO nothing;
    
    INSERT INTO public.msisdn_detail
                (
                            id,
                            msisdn,
                            new_subscriber,
                            serial,
                            subscriber_type,
                            zap,
                            basic_data_fk
                )
                VALUES
                (
                            ld_id,
                            coalesce(ld_msisdn, 'NOT_ASSIGNED'),
                            'true',
                            coalesce(ld_sim_serial, 'NOT ASSIGNED'),
                            'PREPAID',
                            'false',
                            ld_id
                )
    ON conflict
                (
                            id
                )
                DO nothing;
    
    INSERT INTO public.meta_data
                (
                            id,
                            app_version,
                            capture_machine_id,
                            confirmation_timestamp,
                            realtime_device_id,
                            state_of_registration,
                            sync_timestamp,
                            basic_data_fk,
                            enrollment_ref_fk
                )
                VALUES
                (
                            ld_id,
                            '100',
                            '00-00-00-00-00-00',
                            ld_sync_date,
                            ld_tag,
                            cast(ld_override_reason AS bigint),
                            ld_sync_date,
                            ld_id,
                            256905
                )
    ON conflict
                (
                            id
                )
                DO nothing;
    
    INSERT INTO public.enrollment_log
                (
                            id,
                            enrollment_date,
                            enrollment_time,
                            basic_data_fk,
                            enrollment_ref_fk
                )
                VALUES
                (
                            ld_id,
                            ld_registration_date,
                            ld_registration_date,
                            ld_id,
                            256905
                )
    ON conflict
                (
                            id
                )
                DO nothing;
    
    INSERT INTO public.sms_activation_request
                (
                            id,
                            activation_timestamp,
                            agility_push_timestamp,
                            confirmation_status,
                            sar_part_key,
                            customer_name,
                            enrollment_ref,
                            is_initiator,
                            phone_number,
                            receipt_timestamp,
                            registration_timestamp,
                            registration_type,
                            sender_number,
                            serial_number,
                            state_id,
                            status,
                            unique_id,
                            phone_number_status_fk
                )
                VALUES
                (
                            ld_id,
                            ld_sync_date,
                            ld_confirmation_timestamp,
                            1,
                            ld_sync_date,
                            ld_firstname
                                        ||' '
                                        ||ld_lastname,
                            ld_tag,
                            'true',
                            coalesce(ld_msisdn, 'NOT_ASSIGNED'),
                            ld_sync_date,
                            ld_registration_date,
                            ld_registration_type,
                            'BIOMETRICS',
                            coalesce(ld_sim_serial, 'NOT_ASSIGNED'),
                            cast(ld_override_reason AS bigint),
                            'UNACTIVATED',
                            ld_id,
                            256730
                )
    ON conflict
                (
                            id
                )
                DO nothing;
    
    INSERT INTO public.bfp_sync_log
                (
                            pk,
                            active,
                            create_date,
                            deleted,
                            last_modified,
                            activation_date,
                            activationstatusenum,
                            bfpsyncstatusenum,
                            file_sync_date,
                            msisdn,
                            sim_serial,
                            unique_id,
                            enrollment_ref_fk,
                            capture_mode,
                            device_id,
                            reg_type,
                            transfer_mode
                )
                VALUES
                (
                            ld_id,
                            'true',
                            ld_sync_date,
                            'false',
                            ld_sync_date,
                            ld_confirmation_timestamp,
                            'ACTIVATED',
                            'SUCCESS',
                            ld_sync_date,
                            coalesce(ld_msisdn, 'NOT_ASSIGNED'),
                            coalesce(ld_sim_serial, 'NOT_ASSIGNED'),
                            ld_id,
                            256905,
                            'CLIENT',
                            ld_tag,
                            ld_registration_type,
                            'HTTP'
                )
    ON conflict
                (
                            pk
                )
                DO nothing;
    
    UPDATE legacy_demographics
    SET    basic_data_created = TRUE
    WHERE  id = ld_id;
  
  END LOOP;
  CLOSE cur_data_migration;
  COMMIT;
END;
$$; 